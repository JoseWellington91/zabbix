#!/bin/bash
# dep_platform
# Modified by shidg,20170920

# Define Variables
source ~/.bashrc
source ~/common.sh
DEFINE_VARIABLES
CMD=`echo $(basename $0)`
BRANCH_NUMBER=release_$1
BUILD_DIR=/Data/war/Platform/branch/${BRANCH_NUMBER}

# create dirs if not exist
[ ! -d ${BUILD_DIR} ] && mkdir -p ${BUILD_DIR}

#Begin
START_TIME=`date "+%Y%m%d-%T"`

#判断参数是否正确
if [ -z $1 ];then
    echo -e "缺少参数\nUsage: $CMD [branch number]\nE.g:   dep_platform 1.0.11"
    exit
elif ! [[ "$1" =~ ^[1-9]\.[0-9]\.[0-9][0-9]$ ]];then
    echo -e "参数格式不正确"
    exit
fi


#弹出菜单
MENU

# update source code
cd ${SOURCE_DIR}
git fetch
git checkout ${BRANCH_NUMBER}
git pull
git log | head -3 > /tmp/gitinfo
export GIT_MSG=`cat /tmp/gitinfo`
export COMMIT_VERSION=`head -1 /tmp/gitinfo | cut -d " " -f 2`
export COMMIT_AUTHOR=`tail -1 /tmp/gitinfo | cut -d ":" -f 2`
export DEPLOY_VERSION=`echo ${COMMIT_VERSION:0:5}`
export LAST_DEPLOY_VERSION=`cat /tmp/last_version_platform_${BRANCH_NUMBER}`
#if [ "$need" = "1" -a  -n "${LAST_DEPLOY_VERSION}" -a "${DEPLOY_VERSION}" = "${LAST_DEPLOY_VERSION}" ];then
#	echo "No change!"
#	exit
#elif [ "$need" != "1" -a  -n "${LAST_DEPLOY_VERSION}" -a "${DEPLOY_VERSION}" != "${LAST_DEPLOY_VERSION}" ];then
#	echo "Have new submission (${COMMIT_AUTHOR}),Please confirm!"
#	exit
#fi 

#build war packages
   cd ${SOURCE_DIR}/manage-common
   mvn clean install -Dmaven.test.skip=true
   cd ${SOURCE_DIR}/manage-global-api                                                  
   mvn clean install -Dmaven.test.skip=true

   cd ${SOURCE_DIR}/wzc
   mvn clean package -Dmaven.test.skip=true

   cd ${SOURCE_DIR}/consumer-wap
   mvn clean package -Dmaven.test.skip=true


# delete old wars & move war to /Data/war/trunk
PROJS2=(manage-web consumer-app manage-metadata manage-datawarehouse manage-report manage-orders manage-app wechat download manage-thirdparty report-superviser consumer-wap)

rm -rf ${BUILD_DIR}/*

for PROJ in ${PROJS2[*]}
    do
        mv -f ${SOURCE_DIR}/${PROJ}/target/*war ${BUILD_DIR}
    done
#
# rsync war to remote server
if [ "$need" = "4" ];then
    echo -e "Current version is ${DEPLOY_VERSION}\nUploading packages to $TYPE ..."
    rsync -az --delete --password-file=/etc/rsync.pass --progress ${BUILD_DIR}/ ${SYNC_USER}@${REMOTE_SERVER[0]}::${RSYNC_MODULE} &
    rsync -az --delete --password-file=/etc/rsync.pass --progress ${BUILD_DIR}/ ${SYNC_USER}@${REMOTE_SERVER[1]}::${RSYNC_MODULE} &
wait

#restart tomcat on ${REMOTE_SERVER}
	ssh -p ${SSH_PORT} ${REMOTE_SERVER[0]} "/Data/scripts/restart_tomcat_${BRANCH_NUMBER}.sh ${DEPLOY_VERSION}" &  
	ssh -p ${SSH_PORT} ${REMOTE_SERVER[1]} "/Data/scripts/restart_tomcat_${BRANCH_NUMBER}.sh ${DEPLOY_VERSION}" &
wait                   

else    
    echo -e "Current version is ${DEPLOY_VERSION}\nUploading packages to $TYPE ..."
    rsync -az --delete --password-file=/etc/rsync.pass --progress ${BUILD_DIR}/ ${SYNC_USER}@${REMOTE_SERVER}::${RSYNC_MODULE}

#restart tomcat on $(REMOTE_SERVER)
	ssh -p ${SSH_PORT} ${REMOTE_SERVER} "/Data/scripts/restart_tomcat_${BRANCH_NUMBER}.sh ${DEPLOY_VERSION}" 
fi

END_TIME=`date "+%Y%m%d-%T"`

cat > /tmp/upinfo <<EOF
=========================
server:${REMOTE_SERVER}
Start at:${START_TIME}
Finish at:${END_TIME}
$GIT_MSG
Current version:${DEPLOY_VERSION}
Last version:${LAST_DEPLOY_VERSION}
EOF

#log
cat /tmp/upinfo >> /Data/logs/deplog/deploy_platform_${BRANCH_NUMBER}.log

echo ${DEPLOY_VERSION} > /tmp/last_version_platform_${BRANCH_NUMBER}

# Done

exit 0
